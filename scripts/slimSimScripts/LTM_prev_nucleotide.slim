initialize() {
	
	initializeSLiMOptions(nucleotideBased=T);
	if(exists('slimgui')){
		liabilitySize = 1500000;
		threshold = 75000;
		perSiteMutRate = 1e-6;		
		popSize = 1000;
		envSD = 55.78;
		fitnessCost = 0.4472;
		zeroStart = F;
		sampleInt=50;
		cyc=50;
		rep=1;
		toyRun=0;
	} else{
	// set parameters
		liabilitySize = liaSize;
		threshold = thr_input;
		perSiteMutRate = mu;
		popSize = p;
		envSD = e;
		fitnessCost = f;
	}
	perSiteRecRate = 100 * perSiteMutRate; // set the perSiteRecRate equal to 100 *	

	// transformed parameters
	maxG = 2 * liabilitySize;

	defineConstant('L', liabilitySize);	
	defineConstant('ENV_SIGMA',envSD);
	defineConstant('THR',threshold);
	defineConstant('RHO',THR/(2*L));
	
	
	
	
	
	// you can change this, when THR smaller than this number, starting point is 0; otherwise, it is THR - THR_MINUS
//	defineConstant('THR_START', 2000);

	if ( zeroStart ) {
		// if large effect, start at point 0, set all ancestral alleles to be protective 

		initializeAncestralNucleotides(paste0(rep("A", L))); // Ancestral allele start with protective 
	}
	else {
		// if not, start at threshold point - THR_MINUS, set corresponding number of alleles to be protective and liability increasing 
		mutPress = maxG * perSiteMutRate * (1 - 2*RHO);
		defineConstant('THR_MINUS', 4*popSize*mutPress);
		defineConstant('A_INIT',min(asInteger(L - THR/2 + THR_MINUS),L));
		defineConstant('G_INIT',L - A_INIT);
		sequence_tmp = sample(c(rep('A',A_INIT),rep('G',G_INIT)),L,replace=F);
		initial_sequence='';
		for(i in 0:(length(sequence_tmp)-1)){
			initial_sequence = initial_sequence + sequence_tmp[i];
		}
		//		initial_sequence = randomNucleotides(L, c(L-asInteger(L*RHO)+ asInteger(THR_MINUS), 0, asInteger(L*RHO)- asInteger(THR_MINUS), 0));
		initializeAncestralNucleotides(initial_sequence);
		defineConstant('ANC',initial_sequence);
	}
	
	
	// define constants
	defineConstant('MU',perSiteMutRate);
	defineConstant('REC',perSiteRecRate);
	defineConstant('N',popSize);
	defineConstant('FITCOST',fitnessCost);
	defineConstant('SAMPLE_INT', sampleInt);
	defineConstant('CYCLE', cyc);
	defineConstant('REP',rep);
	defineConstant('TOYRUN',toyRun);
	
	if(!exists('slimgui')){
	// output files
		defineConstant('FIXEDOUT',fixedOut);
		defineConstant('MEANOUT',meanOut);
		defineConstant('H2OUT',h2Out);
		defineConstant('PREVOUT',prevOut);
		defineConstant('GENVAROUT',genVarOut);
		defineConstant('NSEGOUT',nSegOut);
		defineConstant('DELTAROUT',deltaROut);
		defineConstant('RISKFREQOUT',riskFreqOut);
		defineConstant('DERFREQOUT',derFreqOut);
		defineConstant('SITEVAROUT',siteVarOut);
	}
	
	
	// liability mutations
	LiaMuts = initializeMutationTypeNuc("m1", 0.5, 'f', 0);
	LiaMuts.convertToSubstitution=T;
	
	mutationMatrix = matrix(c(0,0,MU,0, 0,0,0,0, MU,0,0,0, 0,0,0,0), nrow=4, ncol=4);
	initializeGenomicElementType('g1', m1, 1.0, mutationMatrix);
	
	initializeGenomicElement(g1, 0, L-1);
	// set recombinationrate  
	initializeRecombinationRate(REC);
}


fitness(NULL){
	return (1.0 - FITCOST * asFloat(individual.tagF >= THR)) * relFitness;
}


1 {
	print(sim.generation);
	sim.addSubpop('p1', N);
	sim.setValue("cycles", 0);
	if ( zeroStart ) {
		sim.setValue("fixedPos", NULL);  // record position fixed for risk allele
	}
	
	// small effect size, count how many are fixed at risk allele   
	else {
		temp=c();
		for (i in c(0: (nchar(ANC)-1))){
			if (substr(ANC, i,i)=="G") temp = c(temp, i);
			sim.setValue("fixedPos", temp);
		}
		// print(length(sim.getValue("fixedPos")));
	}
	sim.setValue("Nfixed", 0);   // record total number of fixed allele

}


1:5000000 late() {
	thisGen = sim.generation;
	inds = sim.subpopulations.individuals;
	muts = sim.mutations;
	mutTypes = sim.mutationTypes;
	
	// count up substitutions
	subs = sim.substitutions.nucleotide;
	fixedGenLi = 2 * length(sim.getValue("fixedPos"));
	if (length(subs)!= sim.getValue("Nfixed")){
		for (newsubs in c((sim.getValue("Nfixed") +1): length(subs))){
			sim.setValue("Nfixed", sim.getValue("Nfixed") + 1);
			
			// the new substitution was a plus fix
			if (subs[newsubs-1] == "G"){
				plus_pos = sim.substitutions[newsubs-1].position;
				sim.setValue("fixedPos", c(sim.getValue("fixedPos"), plus_pos));
				fixedGenLi = fixedGenLi + 2 ;
			}
			
			// the new substitution was a minus fix
			if (subs[newsubs-1] == "A"){
				minus_pos = sim.substitutions[newsubs-1].position;
				if (length(sim.getValue("fixedPos")) !=0){
					if (sum(minus_pos == sim.getValue("fixedPos")) !=0){
						
						// When it is previously a fixed risk allele, fixed genetic liability -2  and take it out of the fixedPos list 
						fixedGenLi = fixedGenLi - 2;
						old_fixedPos = sim.getValue("fixedPos");
						new_fixedPos = old_fixedPos[which(old_fixedPos !=minus_pos)];
						sim.setValue("fixedPos", new_fixedPos);
					}
				}
			}
		}
	}
	Ninds = length(inds);
	
	// remove back mutations from the mutations list, but leave the nucleotide change
	// this is needed in order to maintain the right finite sites accounting given slim's 
	// mutation model
	seg_back = sim.mutations[sim.mutations.nucleotide=="A"];
	if (length(sim.getValue("fixedPos")) !=0){
		seg_back = seg_back[match(seg_back.position, sim.getValue("fixedPos"))==-1];
	}
	for (i in seg_back){
		sim.subpopulations.genomes.removeMutations(i, F);
	}
	
	// calculate the liability for the segregating sites 
	segGenLi = rep(0, Ninds);
	for (i in c(0:(Ninds-1))){
		ind_mut = sim.subpopulations.individuals[i].genomes.mutations;
		// the back mutations did not remove in the registry after the second generations, so need to filter again. 
		if (length(seg_back) !=0){
			ind_mut = ind_mut[match(ind_mut, seg_back) == -1];
		}
		ind_mut_nuc = ind_mut.nucleotide;
		segGenLi[i] = sum(ind_mut_nuc =="G") - sum(ind_mut_nuc =="A");
	}
	
	
	// calculate components of genetic liability
	genLi=fixedGenLi+segGenLi;
	if(ENV_SIGMA != 0){
		liabilities = genLi + rnorm(N, 0.0, ENV_SIGMA);
	} else {
		liabilities = genLi;
	}
	
	
	inds.tagF = liabilities;
	
	
	if (
		(sim.generation > 10*N & sim.generation % SAMPLE_INT ==0 & sim.getValue("cycles") < CYCLE & TOYRUN == 0) |
		(TOYRUN == 1 & sim.generation % 5 == 0)
		)
	{
		
		
		risk = rep(0.0, length(genLi));
		
		// compute individuals' genetic risk
		for(i in c(0: (length(genLi)-1))){
			if(ENV_SIGMA != 0){
				risk[i] = 1 - pnorm(THR, genLi[i], ENV_SIGMA);
			} else {
				risk[i] = asFloat(liabilities[i] >= THR);
			}
		}
		
			
		// things to output
		mean=mean(genLi);
		genVar=var(genLi);
		phenVar=var(liabilities);
		
		h2=genVar/phenVar;
		prev=sum(liabilities >THR)/length(liabilities );
		nSeg = length(sim.mutations);
		
		// compute things to output
		// before that, need to account for any back mutations that were removed earlier
		// as by default they aren't remove from the mutation list until the end of 
		// the generation 	
		mutTypes = sim.mutationTypes;
		tmp_all_lia = sim.mutationsOfType(mutTypes[0]);
		all_lia = tmp_all_lia[match(tmp_all_lia,seg_back)==-1];		
		if(length(all_lia)!=0){
			siteVar = rep(0.0, length(all_lia));
			riskFreq = rep(0.0, length(all_lia));
			derFreq = rep(0.0, length(all_lia));
			riskEffect = rep(0.0, length(all_lia));
			for (i in c(0: (length(all_lia)-1))){
				//print(sim.generation);
				x = asInteger(p1.individuals.genome1.containsMutations(all_lia[i])) + asInteger(p1.individuals.genome2.containsMutations(all_lia[i]));
				if (all_lia[i].nucleotide == "A") {
					x = 2-x;
				}
				meanx = mean(x);
				num = sum((x-meanx)*(risk - mean(risk)));
				denom = sum( (x-meanx)^2 );
				riskEffect[i] = num/denom;
				siteVar[i] = denom/(N-1);
				riskFreq[i]=meanx/2;
				if (all_lia[i].nucleotide == "A") {
					derFreq[i] = 1 - riskFreq[i];
				} else {
					derFreq[i] = riskFreq[i];
				}
			
			}
			meanRiskEffect=mean(riskEffect);
			writeFile(DELTAROUT, paste(meanRiskEffect, sep=","), append=T);
			writeFile(RISKFREQOUT, paste(riskFreq, sep=","), append=T);
			writeFile(DERFREQOUT, paste(derFreq, sep=","), append=T);
			writeFile(SITEVAROUT, paste(siteVar, sep=","), append=T);
			
			
			
			writeFile(FIXEDOUT, paste(fixedGenLi, sep=","), append=T);
			writeFile(MEANOUT, paste(mean, sep=","), append=T);
			writeFile(PREVOUT, paste(prev, sep=","), append=T);
			writeFile(H2OUT, paste(h2, sep=","), append=T);
			writeFile(GENVAROUT, paste(genVar, sep=","), append=T);
			writeFile(NSEGOUT, paste(nSeg, sep=","), append=T);
			sim.setValue("cycles", sim.getValue("cycles") +1);
		}
	}
	else if (
		(sim.getValue("cycles") >= CYCLE)
		)
	{
		sim.simulationFinished();
	}
	else if (
		sim.generation > 10 & TOYRUN == 1
		)
	{
		sim.simulationFinished();
	}
}

